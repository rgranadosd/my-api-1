name: API Scoring

on:
  workflow_run:
    workflows: ["Importar"]        # debe coincidir EXACTAMENTE con el name: del flujo padre
    types: [completed]

jobs:
  run-scoring:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
    # 1) Código fuente del repo
    - name: Checkout repo
      uses: actions/checkout@v3

    # 2) Clonar el motor de scoring
    - name: Clone scoring engine
      run: git clone --depth 1 https://github.com/rgranadosd/api-scoring-engine.git scoring_engine

    # 3) Wrapper opcional para docker-compose (runners con Compose v2)
    - name: Habilitar docker-compose (wrapper para Compose v2)
      run: |
        if ! command -v docker-compose &>/dev/null; then
          echo '#!/usr/bin/env bash'      | sudo tee  /usr/local/bin/docker-compose
          echo 'exec docker compose "$@"' | sudo tee -a /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi

    # 4) Arrancar el contenedor de scoring
    - name: Start scoring engine (Docker Compose)
      working-directory: scoring_engine
      run: |
        docker-compose up --build -d
        echo "⏳ Esperando a que el servicio responda en http://localhost:8088 ..."
        for i in {1..30}; do
          if curl -s http://localhost:8088/health | grep -qi '"status":"UP"'; then
            echo "✅ Scoring engine listo"; exit 0; fi
          sleep 5
        done
        echo "::error::Scoring engine no respondió a tiempo"; docker-compose logs; exit 1

    # 5) Localizar todos los apis/**/api.yaml del repo
    - name: Localizar especificaciones
      id: specs
      run: |
        mapfile -t SPEC_FILES < <(git ls-files 'apis/**/api.yaml')
        if [ ${#SPEC_FILES[@]} -eq 0 ]; then
          echo "::error::No se encontró ningún apis/**/api.yaml"; exit 1
        fi
        printf '%s\n' "${SPEC_FILES[@]}"
        { echo 'specs<<EOF'; printf '%s\n' "${SPEC_FILES[@]}"; echo 'EOF'; } >> "$GITHUB_OUTPUT"

    # 6) Enviar cada api.yaml al motor y guardar resultados
    - name: Calcular scoring
      id: score
      run: |
        IFS=$'\n' read -d '' -r -a SPECS <<<"${{ steps.specs.outputs.specs }}"
        mkdir -p scores
        echo "### Resultados de scoring" >> "$GITHUB_STEP_SUMMARY"
        for spec in "${SPECS[@]}"; do
          api=$(basename "$(dirname "$(dirname "$spec")")")
          ver=$(basename "$(dirname "$spec")")
          out="scores/${api}_${ver}.json"
          echo "⏩ Scoring $spec → $out"
          curl --fail -s -X POST -F "file=@${spec};type=text/yaml" \
               http://localhost:8088/apifirst/v1/apis/score-file \
               -o "$out"
          grade=$(jq -r '.overallGrade // .grade // "?"' "$out")
          echo "• **${api} ${ver}** → ${grade}" >> "$GITHUB_STEP_SUMMARY"
        done

    # 7) Subir todos los JSON como artefacto
    - name: Upload scores
      uses: actions/upload-artifact@v4
      with:
        name: api-scores
        path: scores/

    # 8) Apagar y limpiar el contenedor, pase lo que pase
    - name: Tear-down scoring engine
      if: always()
      working-directory: scoring_engine
      run: docker-compose down