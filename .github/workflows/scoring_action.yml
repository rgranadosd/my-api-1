name: API Scoring

on:
  workflow_run:
    workflows: ["Importar"]          # ← Debe coincidir EXACTAMENTE con el name: del flujo padre
    types: [completed]

jobs:
  run-scoring:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
    # 1) Checkout del repositorio
    - name: Checkout repo
      uses: actions/checkout@v3

    # 2) Clonar el motor de scoring
    - name: Clone scoring engine
      run: git clone --depth 1 https://github.com/rgranadosd/api-scoring-engine.git scoring_engine

    # 3) Crear alias docker-compose si el runner sólo trae Compose v2
    - name: Enable docker-compose alias if needed
      run: |
        if ! command -v docker-compose &>/dev/null; then
          printf '#!/usr/bin/env bash\nexec docker compose "$@"\n' \
            | sudo tee /usr/local/bin/docker-compose >/dev/null
          sudo chmod +x /usr/local/bin/docker-compose
        fi

    # 4) Arrancar contenedor y esperar a que /health devuelva 200 OK
    - name: Start scoring engine
      working-directory: scoring_engine
      run: |
        docker-compose up --build -d
        echo "⏳ Waiting for /health 200..."
        for i in {1..30}; do
          if curl -sf http://localhost:8088/health >/dev/null; then
            echo "✅ Ready"
            break
          fi
          sleep 5
          if [ $i -eq 30 ]; then
            echo "::error::Timeout - Container not healthy"
            docker-compose logs
            curl -v http://localhost:8088/health
            exit 1
          fi
        done

    # 5) Localizar todas las especificaciones apis/**/api.yaml
    - name: Find api.yaml
      id: specs
      run: |
        mapfile -t SPEC_FILES < <(git ls-files 'apis/**/api.yaml')
        if [ ${#SPEC_FILES[@]} -eq 0 ]; then
          echo "::error::No se encontró ningún archivo api.yaml."
          exit 1
        fi
        { echo 'specs<<EOF'; printf '%s\n' "${SPEC_FILES[@]}"; echo 'EOF'; } >> "$GITHUB_OUTPUT"
        echo "::notice::Archivos api.yaml encontrados: ${SPEC_FILES[*]}"

    # 6) Calcular scoring y generar Job Summary coloreado
    - name: Run scoring & build summary
      run: |
        mapfile -t SPECS <<<"${{ steps.specs.outputs.specs }}"
        mkdir -p scores

        {
          echo "## Resultados de calidad de las APIs"
          echo
          echo "| API | Módulo | Nota |"
          echo "|-----|--------|------|"
        } >> "$GITHUB_STEP_SUMMARY"

        color () {
          [[ "$1" =~ ^([A]|B($|\+)) ]] \
            && printf "<span style='color:#22863a;font-weight:bold;'>%s</span>" "$1" \
            || printf "<span style='color:#d91e18;font-weight:bold;'>%s</span>" "$1"
        }

        for spec in "${SPECS[@]}"; do
          api=$(basename "$(dirname "$(dirname "$spec")")")
          ver=$(basename "$(dirname "$spec")")
          out="scores/${api}_${ver}.json"

          echo "⏩ Scoring $spec → $out"

          curl --fail -s -v \
            -X POST \
            -F "file=@${spec};type=text/yaml" \
            -F "apiProtocol=REST" \
            http://localhost:8088/apifirst/v1/apis/score-file \
            -o "$out" || { echo "::warning::Curl failed for ${spec}. Check logs for details."; cat "$out" 2>/dev/null; true; }

          # --- DEBUG: Mostrar el contenido del archivo JSON generado ---
          echo "--- DEBUG: Contenido de $out ---"
          if [ -s "$out" ]; then
             cat "$out"
          else
             echo "El archivo $out está vacío o no se creó."
          fi
          echo "-----------------------------------"

          # ─── Procesar y añadir la Fila Overall al resumen ───
          # *** CORRECCIÓN: Usar .overallRating en lugar de .overallGrade/.grade ***
          overall=$(jq -r '.overallRating // "?"' "$out")
          echo "--- DEBUG: Overall grade for ${spec}: ${overall} ---"
          echo "| ${api} ${ver} | **Overall** | $(color "$overall") |" >> "$GITHUB_STEP_SUMMARY"

          # ─── Recorrer módulos específicos (Design, Security, Documentation) y añadirlos al resumen ───
          # *** CORRECCIÓN: Adaptar jq para extraer ratings específicos del nivel superior ***
          echo "--- DEBUG: Salida de jq para módulos específicos desde $out ---"
          JQ_MODULE_OUTPUT=$(jq -r '
            # Creamos un objeto con los nombres de "módulos" y sus ratings correspondientes
            {
              "Design": .designRating,
              "Security": .securityRating,
              "Documentation": .documentationRating
            }
            # Convertimos el objeto a un array de pares [clave, valor]
            | to_entries
            # Mapeamos cada par a una cadena "clave\tvalor"
            | map("\(.key)\t\(.value // "?")") # Usamos // "?" por si algún rating falta
            # Imprimimos cada cadena como una línea separada
            | .[]
          ' "$out")
          echo "$JQ_MODULE_OUTPUT"
          echo "---------------------------------------------"

          # Procesar la salida de jq y añadir filas por módulo al resumen
          echo "$JQ_MODULE_OUTPUT" | while IFS=$'\t' read -r mod grade; do
              # Solo añadir la fila si hemos podido extraer tanto el módulo como la nota
              if [ -n "$mod" ] && [ -n "$grade" ]; then
                echo "| ${api} ${ver} | ${mod} | $(color "$grade") |" >> "$GITHUB_STEP_SUMMARY"
                echo "--- DEBUG: Added module row for ${mod} with grade ${grade} ---"
              else
                echo "--- DEBUG: Skipping empty or incomplete module row (mod: '${mod}', grade: '${grade}') ---"
              fi
          done
        done

        # --- DEBUG: Mostrar el contenido final del Job Summary ---
        echo "--- DEBUG: Contenido final de \$GITHUB_STEP_SUMMARY ---"
        cat "$GITHUB_STEP_SUMMARY"
        echo "-------------------------------------------------"

    # 7) Subir todos los JSON generados como un artefacto del workflow
    - name: Upload scores
      uses: actions/upload-artifact@v4
      with:
        name: api-scores
        path: scores/

    # 8) Apagar y limpiar el contenedor de Docker (Este paso siempre se ejecuta)
    - name: Tear-down
      if: always()
      working-directory: scoring_engine
      run: docker-compose down